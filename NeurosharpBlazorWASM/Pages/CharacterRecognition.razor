@page "/characterrecognition"
@using NeurosharpBlazorWASM.Models
@using Newtonsoft.Json
@using System.Text.Json
@inject IJSRuntime JsRuntime;

<MatDialogContent>
    <SignaturePad @ref="signature" MinWidth="@size" MinHeight="@size" MaxWidth="@size" MaxHeight="@size" OnSignatureChange="@(() => SignatureChangeEvent())">
        <SignaturePadFooter FooterDirective="@("Sign Please")" />
    </SignaturePad>  
</MatDialogContent>
<MatDialogActions>
    <MatButton OnClick="@(() => signature.Clear())">Clear</MatButton>
    <MatButton OnClick="@(() => signature.Save(SignaturePad.SupportedSaveAsTypes.png))">Save</MatButton>
    <MatIconButton OnClick="@(e => { dialogIsOpen = false; })"/>
</MatDialogActions>


<canvas @ref="_canvasReference" style="display: none" width="@size" height="@size"></canvas>

@code{
    int size = 512;
    double scale = 0.25;
    bool dialogIsOpen = false;
    bool trainingMode = true;
    SignaturePad signature;
    Network _network;
    ElementReference _canvasReference;
    ElementReference _imageReference;

    protected override async Task OnInitializedAsync()
    {
    //_network = NetworkStorage.Networks["CharacterRecognition"];
    }

    public async void SignatureChangeEvent()
    {
        string imageURL = await signature.ToDataURL();
        await JsRuntime.InvokeAsync<object>("image_processor.ParseCanvas", imageURL, _canvasReference, scale);
    }

    [JSInvokable]
    public static void ReceiveImageData(object data)
    {
        Vector<double> rawImageVector = Vector<double>.Build.DenseOfEnumerable(
            ((JsonElement)data).EnumerateArray().Select(x => double.Parse(x.ToString()))
        );
        
        // still too big. Scale down to 32x32 with max pooling
        int rawImageSize = (int)Math.Sqrt(rawImageVector.Count);
        Network scalingNetwork = new Network(rawImageSize);
        MaxPoolingLayer layer = new MaxPoolingLayer(poolSize: 4, stride: 4);
        layer.SetFilterCount(1);
        scalingNetwork.Layers.Add(layer);
        Vector<double> scaledImage = scalingNetwork.Predict(rawImageVector);

        string pixelVals = string.Join(",", scaledImage);
        Console.WriteLine(pixelVals);
    }
}