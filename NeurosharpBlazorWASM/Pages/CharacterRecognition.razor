@page "/characterrecognition"
@using NeurosharpBlazorWASM.Models
@inject IJSRuntime JsRuntime;

<MatDialogContent>
    <SignaturePad @ref="signature" MinWidth="200" MinHeight="200" MaxWidth="200" MaxHeight="200" OnSignatureChange="@(() => SignatureChangeEvent())">
        <SignaturePadFooter FooterDirective="@("Sign Please")" />
    </SignaturePad>  
</MatDialogContent>
<MatDialogActions>
    <MatButton OnClick="@(() => signature.Clear())">Clear</MatButton>
    <MatButton OnClick="@(() => signature.Save(SignaturePad.SupportedSaveAsTypes.png))">Save</MatButton>
    <MatIconButton OnClick="@(e => { dialogIsOpen = false; })"/>
</MatDialogActions>


<canvas @ref="_canvasReference" style="display: none" width="200" height="200"></canvas>

@code{
    bool dialogIsOpen = false;
    SignaturePad signature;
    NetworkStorage _networkStorage;
    ElementReference _canvasReference;
    ElementReference _imageReference;

    public async void SignatureChangeEvent()
    {
        string imageURL = await signature.ToDataURL();
        await JsRuntime.InvokeAsync<object>("image_processor.ParseCanvas", imageURL, _canvasReference, _imageReference);
    }

    [JSInvokable]
    public static void ReceiveImageData(object data)
    {
        if(data == null)
            Console.WriteLine("I am null");
        else
        {
            Console.WriteLine(data);
        }
    }
}